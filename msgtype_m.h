//
// Generated file, do not edit! Created by opp_msgtool 6.0 from msgtype.msg.
//

#ifndef __MSGTYPE_M_H
#define __MSGTYPE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MQEntry;
class GenericMessage;
class Message;
class FaultMessage;
class AckMessage;
class HBMessage;
class HBAckMessage;
class NewNodeMessage;
class NewNodeStage2Message;
class NewNodeInfoMessage;
class OldNodeMessage;
/**
 * Class generated from <tt>msgtype.msg:15</tt> by opp_msgtool.
 * <pre>
 * class MQEntry
 * {
 *     int l_id;
 *     int l_clock;
 *     string text;
 * }
 * </pre>
 */
class MQEntry
{
  protected:
    int l_id = 0;
    int l_clock = 0;
    omnetpp::opp_string text;

  private:
    void copy(const MQEntry& other);

  protected:
    bool operator==(const MQEntry&) = delete;

  public:
    MQEntry();
    MQEntry(const MQEntry& other);
    virtual ~MQEntry();
    MQEntry& operator=(const MQEntry& other);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    virtual int getL_id() const;
    virtual void setL_id(int l_id);

    virtual int getL_clock() const;
    virtual void setL_clock(int l_clock);

    virtual const char * getText() const;
    virtual void setText(const char * text);
};

/**
 * Class generated from <tt>msgtype.msg:21</tt> by opp_msgtool.
 * <pre>
 * message GenericMessage
 * {
 *     int mex_type;
 *     int sender_id;
 * }
 * </pre>
 */
class GenericMessage : public ::omnetpp::cMessage
{
  protected:
    int mex_type = 0;
    int sender_id = 0;

  private:
    void copy(const GenericMessage& other);

  protected:
    bool operator==(const GenericMessage&) = delete;

  public:
    GenericMessage(const char *name=nullptr, short kind=0);
    GenericMessage(const GenericMessage& other);
    virtual ~GenericMessage();
    GenericMessage& operator=(const GenericMessage& other);
    virtual GenericMessage *dup() const override {return new GenericMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getMex_type() const;
    virtual void setMex_type(int mex_type);

    virtual int getSender_id() const;
    virtual void setSender_id(int sender_id);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GenericMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GenericMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:26</tt> by opp_msgtool.
 * <pre>
 * message Message extends GenericMessage
 * {
 *     int l_id;
 *     int l_clock;
 *     string text;
 *     int last_cid[];
 *     int last_cclock[];
 * }
 * </pre>
 */
class Message : public ::GenericMessage
{
  protected:
    int l_id = 0;
    int l_clock = 0;
    omnetpp::opp_string text;
    int *last_cid = nullptr;
    size_t last_cid_arraysize = 0;
    int *last_cclock = nullptr;
    size_t last_cclock_arraysize = 0;

  private:
    void copy(const Message& other);

  protected:
    bool operator==(const Message&) = delete;

  public:
    Message(const char *name=nullptr, short kind=0);
    Message(const Message& other);
    virtual ~Message();
    Message& operator=(const Message& other);
    virtual Message *dup() const override {return new Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getL_id() const;
    virtual void setL_id(int l_id);

    virtual int getL_clock() const;
    virtual void setL_clock(int l_clock);

    virtual const char * getText() const;
    virtual void setText(const char * text);

    virtual void setLast_cidArraySize(size_t size);
    virtual size_t getLast_cidArraySize() const;
    virtual int getLast_cid(size_t k) const;
    virtual void setLast_cid(size_t k, int last_cid);
    virtual void insertLast_cid(size_t k, int last_cid);
    [[deprecated]] void insertLast_cid(int last_cid) {appendLast_cid(last_cid);}
    virtual void appendLast_cid(int last_cid);
    virtual void eraseLast_cid(size_t k);

    virtual void setLast_cclockArraySize(size_t size);
    virtual size_t getLast_cclockArraySize() const;
    virtual int getLast_cclock(size_t k) const;
    virtual void setLast_cclock(size_t k, int last_cclock);
    virtual void insertLast_cclock(size_t k, int last_cclock);
    [[deprecated]] void insertLast_cclock(int last_cclock) {appendLast_cclock(last_cclock);}
    virtual void appendLast_cclock(int last_cclock);
    virtual void eraseLast_cclock(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:34</tt> by opp_msgtool.
 * <pre>
 * message FaultMessage extends GenericMessage
 * {
 *     int fault_node;
 *     MQEntry queue[];
 * }
 * </pre>
 */
class FaultMessage : public ::GenericMessage
{
  protected:
    int fault_node = 0;
    MQEntry *queue = nullptr;
    size_t queue_arraysize = 0;

  private:
    void copy(const FaultMessage& other);

  protected:
    bool operator==(const FaultMessage&) = delete;

  public:
    FaultMessage(const char *name=nullptr, short kind=0);
    FaultMessage(const FaultMessage& other);
    virtual ~FaultMessage();
    FaultMessage& operator=(const FaultMessage& other);
    virtual FaultMessage *dup() const override {return new FaultMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getFault_node() const;
    virtual void setFault_node(int fault_node);

    virtual void setQueueArraySize(size_t size);
    virtual size_t getQueueArraySize() const;
    virtual const MQEntry& getQueue(size_t k) const;
    virtual MQEntry& getQueueForUpdate(size_t k) { return const_cast<MQEntry&>(const_cast<FaultMessage*>(this)->getQueue(k));}
    virtual void setQueue(size_t k, const MQEntry& queue);
    virtual void insertQueue(size_t k, const MQEntry& queue);
    [[deprecated]] void insertQueue(const MQEntry& queue) {appendQueue(queue);}
    virtual void appendQueue(const MQEntry& queue);
    virtual void eraseQueue(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FaultMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FaultMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:39</tt> by opp_msgtool.
 * <pre>
 * message AckMessage extends Message
 * {
 * }
 * </pre>
 */
class AckMessage : public ::Message
{
  protected:

  private:
    void copy(const AckMessage& other);

  protected:
    bool operator==(const AckMessage&) = delete;

  public:
    AckMessage(const char *name=nullptr, short kind=0);
    AckMessage(const AckMessage& other);
    virtual ~AckMessage();
    AckMessage& operator=(const AckMessage& other);
    virtual AckMessage *dup() const override {return new AckMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:41</tt> by opp_msgtool.
 * <pre>
 * message HBMessage extends Message
 * {
 * }
 * </pre>
 */
class HBMessage : public ::Message
{
  protected:

  private:
    void copy(const HBMessage& other);

  protected:
    bool operator==(const HBMessage&) = delete;

  public:
    HBMessage(const char *name=nullptr, short kind=0);
    HBMessage(const HBMessage& other);
    virtual ~HBMessage();
    HBMessage& operator=(const HBMessage& other);
    virtual HBMessage *dup() const override {return new HBMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HBMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HBMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:43</tt> by opp_msgtool.
 * <pre>
 * message HBAckMessage extends Message
 * {
 * }
 * </pre>
 */
class HBAckMessage : public ::Message
{
  protected:

  private:
    void copy(const HBAckMessage& other);

  protected:
    bool operator==(const HBAckMessage&) = delete;

  public:
    HBAckMessage(const char *name=nullptr, short kind=0);
    HBAckMessage(const HBAckMessage& other);
    virtual ~HBAckMessage();
    HBAckMessage& operator=(const HBAckMessage& other);
    virtual HBAckMessage *dup() const override {return new HBAckMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HBAckMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HBAckMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:45</tt> by opp_msgtool.
 * <pre>
 * message NewNodeMessage extends GenericMessage
 * {
 *     int new_node_id;
 *     MQEntry queue[];
 * }
 * </pre>
 */
class NewNodeMessage : public ::GenericMessage
{
  protected:
    int new_node_id = 0;
    MQEntry *queue = nullptr;
    size_t queue_arraysize = 0;

  private:
    void copy(const NewNodeMessage& other);

  protected:
    bool operator==(const NewNodeMessage&) = delete;

  public:
    NewNodeMessage(const char *name=nullptr, short kind=0);
    NewNodeMessage(const NewNodeMessage& other);
    virtual ~NewNodeMessage();
    NewNodeMessage& operator=(const NewNodeMessage& other);
    virtual NewNodeMessage *dup() const override {return new NewNodeMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNew_node_id() const;
    virtual void setNew_node_id(int new_node_id);

    virtual void setQueueArraySize(size_t size);
    virtual size_t getQueueArraySize() const;
    virtual const MQEntry& getQueue(size_t k) const;
    virtual MQEntry& getQueueForUpdate(size_t k) { return const_cast<MQEntry&>(const_cast<NewNodeMessage*>(this)->getQueue(k));}
    virtual void setQueue(size_t k, const MQEntry& queue);
    virtual void insertQueue(size_t k, const MQEntry& queue);
    [[deprecated]] void insertQueue(const MQEntry& queue) {appendQueue(queue);}
    virtual void appendQueue(const MQEntry& queue);
    virtual void eraseQueue(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NewNodeMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NewNodeMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:50</tt> by opp_msgtool.
 * <pre>
 * message NewNodeStage2Message extends NewNodeMessage
 * {
 * }
 * </pre>
 */
class NewNodeStage2Message : public ::NewNodeMessage
{
  protected:

  private:
    void copy(const NewNodeStage2Message& other);

  protected:
    bool operator==(const NewNodeStage2Message&) = delete;

  public:
    NewNodeStage2Message(const char *name=nullptr, short kind=0);
    NewNodeStage2Message(const NewNodeStage2Message& other);
    virtual ~NewNodeStage2Message();
    NewNodeStage2Message& operator=(const NewNodeStage2Message& other);
    virtual NewNodeStage2Message *dup() const override {return new NewNodeStage2Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NewNodeStage2Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NewNodeStage2Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:52</tt> by opp_msgtool.
 * <pre>
 * message NewNodeInfoMessage extends NewNodeMessage
 * {
 *     int new_hb_next_id;
 *     MQEntry restore[];
 *     int new_view[];
 * }
 * </pre>
 */
class NewNodeInfoMessage : public ::NewNodeMessage
{
  protected:
    int new_hb_next_id = 0;
    MQEntry *restore = nullptr;
    size_t restore_arraysize = 0;
    int *new_view = nullptr;
    size_t new_view_arraysize = 0;

  private:
    void copy(const NewNodeInfoMessage& other);

  protected:
    bool operator==(const NewNodeInfoMessage&) = delete;

  public:
    NewNodeInfoMessage(const char *name=nullptr, short kind=0);
    NewNodeInfoMessage(const NewNodeInfoMessage& other);
    virtual ~NewNodeInfoMessage();
    NewNodeInfoMessage& operator=(const NewNodeInfoMessage& other);
    virtual NewNodeInfoMessage *dup() const override {return new NewNodeInfoMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNew_hb_next_id() const;
    virtual void setNew_hb_next_id(int new_hb_next_id);

    virtual void setRestoreArraySize(size_t size);
    virtual size_t getRestoreArraySize() const;
    virtual const MQEntry& getRestore(size_t k) const;
    virtual MQEntry& getRestoreForUpdate(size_t k) { return const_cast<MQEntry&>(const_cast<NewNodeInfoMessage*>(this)->getRestore(k));}
    virtual void setRestore(size_t k, const MQEntry& restore);
    virtual void insertRestore(size_t k, const MQEntry& restore);
    [[deprecated]] void insertRestore(const MQEntry& restore) {appendRestore(restore);}
    virtual void appendRestore(const MQEntry& restore);
    virtual void eraseRestore(size_t k);

    virtual void setNew_viewArraySize(size_t size);
    virtual size_t getNew_viewArraySize() const;
    virtual int getNew_view(size_t k) const;
    virtual void setNew_view(size_t k, int new_view);
    virtual void insertNew_view(size_t k, int new_view);
    [[deprecated]] void insertNew_view(int new_view) {appendNew_view(new_view);}
    virtual void appendNew_view(int new_view);
    virtual void eraseNew_view(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NewNodeInfoMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NewNodeInfoMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msgtype.msg:58</tt> by opp_msgtool.
 * <pre>
 * message OldNodeMessage extends GenericMessage
 * {
 * }
 * </pre>
 */
class OldNodeMessage : public ::GenericMessage
{
  protected:

  private:
    void copy(const OldNodeMessage& other);

  protected:
    bool operator==(const OldNodeMessage&) = delete;

  public:
    OldNodeMessage(const char *name=nullptr, short kind=0);
    OldNodeMessage(const OldNodeMessage& other);
    virtual ~OldNodeMessage();
    OldNodeMessage& operator=(const OldNodeMessage& other);
    virtual OldNodeMessage *dup() const override {return new OldNodeMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OldNodeMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OldNodeMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const MQEntry *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline MQEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<MQEntry>(); }
template<> inline GenericMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<GenericMessage*>(ptr.get<cObject>()); }
template<> inline Message *fromAnyPtr(any_ptr ptr) { return check_and_cast<Message*>(ptr.get<cObject>()); }
template<> inline FaultMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<FaultMessage*>(ptr.get<cObject>()); }
template<> inline AckMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<AckMessage*>(ptr.get<cObject>()); }
template<> inline HBMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<HBMessage*>(ptr.get<cObject>()); }
template<> inline HBAckMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<HBAckMessage*>(ptr.get<cObject>()); }
template<> inline NewNodeMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<NewNodeMessage*>(ptr.get<cObject>()); }
template<> inline NewNodeStage2Message *fromAnyPtr(any_ptr ptr) { return check_and_cast<NewNodeStage2Message*>(ptr.get<cObject>()); }
template<> inline NewNodeInfoMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<NewNodeInfoMessage*>(ptr.get<cObject>()); }
template<> inline OldNodeMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<OldNodeMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MSGTYPE_M_H

